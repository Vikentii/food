*вызывается из папки проекта*
git init  // создание репозитория
git status  // проверка состояния
git add -A //добавить все файлы, вместо "-А" можно указать имя файла
git commit -a -m"added script file"  //создали коммит с комментарием "added script file", -a -все файлы, -m -комментарий
git push // запушить (залить) гит в репозиторий (GitHub)
git pull  // запулить (скачать) из репозитория

git log  //  просмотреть лог коммитов, параметр " --pretty=oneline" выводит в простой форме
git hist  // создано спомошью алиасов - лог в удобном формате
  // (git config --global alias.hist "log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short")
  // git hist --all показывает все ветки
git checkout  // переключение между ветками или коммитами
git checkout <имя_ветки>  // переключить ветку
git checkout <имя_файла>  // вернуть файл к коммиту (к его версии)
git checkout <hash>  // переключиться на коммит
git checkout -b <имя_ветки>  // создать ветку
git merge <имя_ветки>  // слияние веток - включает указанную ветку в текущую
git rebase <имя_ветки>  // преобразование ветки. Текущая ветка будет содержать все свои изменения, и изменения указанной
git tag // задает имя тега, по нему потом можно переключаться с помощью git checkout
  // git tag <tag>^  //переключение на предшествующую версию
git reset --hard <hash>  //  сброс ветки до коммита (перейти на коммит и удалить все коммиты после него)
  // git reset --hard HEAD^  - удалить текущий коммит и вернуться к предыдущему
  // эти коммиты остаются в репозитории до тех пор, пока не будет запущен сборщик мусора. (you can see - git hist --all)
git commit --amend -m "..."  // перезаписать текущий коммит (можно так же изменить комментарий)
git mv  // перемещение файлов
git clone <имя_репозитория> <имя_клона>  // создание клона репозитория. 
  // Создается из рабочей папки (родительской папки папки .git)
git pull  // извлечение и слияние изменений
